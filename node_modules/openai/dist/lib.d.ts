/// <reference types="node" />
import { Answer, AnswerRequest, Classification, ClassificationRequest, Completion, CompletionRequest, ContentLabel, Embedding, EmbeddingRequest, Engine, EngineId, File, FilePurpose, FineTune, FineTuneEvent, FineTuneRequest, JsonLines, List, SearchDocument, SearchRequest } from './types.js';
import { Readable } from 'stream';
export declare class OpenAI {
    private readonly url;
    private readonly headers;
    constructor(apiKey: string, organizationId?: string, version?: string);
    getEngines(): Promise<Engine[]>;
    getEngine(engine: EngineId): Promise<Engine>;
    complete(engine: EngineId, options: CompletionRequest): Promise<Completion>;
    completeFromModel(fineTunedModel: string, options: CompletionRequest): Promise<Completion>;
    completeAndStream(engine: EngineId, options: CompletionRequest): Promise<Readable>;
    completeFromModelAndStream(fineTunedModel: string, options: CompletionRequest): Promise<Readable>;
    contentFilter(content: string, user?: string): Promise<ContentLabel>;
    search(engine: EngineId, options: SearchRequest): Promise<SearchDocument[]>;
    classify(options: ClassificationRequest): Promise<Classification>;
    answer(options: AnswerRequest): Promise<Answer>;
    getFiles(): Promise<File[]>;
    uploadFile(file: string, jsonlines: JsonLines, purpose: FilePurpose): Promise<File>;
    getFile(fileId: string): Promise<File>;
    deleteFile(fileId: string): Promise<void>;
    finetune(options: FineTuneRequest): Promise<FineTune>;
    getFinetunes(): Promise<FineTune[]>;
    getFinetune(finetuneId: string): Promise<FineTune>;
    cancelFinetune(finetuneId: string): Promise<FineTune>;
    getFinetuneEvents(finetuneId: string): Promise<FineTuneEvent[]>;
    createEmbedding(engine: EngineId, options: EmbeddingRequest): Promise<List<Embedding>>;
    private requestRaw;
    private request;
    private eventStreamTransformer;
}
